/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Lamashare.CLI.ApiGen.Models;

namespace Lamashare.CLI.ApiGen.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class FileClient : IFileClient
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public FileClient(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// Get file total checksum
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetTotalChecksumWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(libraryId, "libraryId");
        __my_queryBuilder.AddParameter(libraryFilePath, "libraryFilePath");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/file/total-checksum{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get file total checksum
    /// </summary>
    public async System.Threading.Tasks.Task<FileChecksumDto?> GetTotalChecksumAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        var __result = await GetTotalChecksumWithHttpInfoAsync(libraryId, libraryFilePath, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<FileChecksumDto?>(__result, token);
    }

    /// <summary>
    /// Get file info
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetFileInfoWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(libraryId, "libraryId");
        __my_queryBuilder.AddParameter(libraryFilePath, "libraryFilePath");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/file/info{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get file info
    /// </summary>
    public async System.Threading.Tasks.Task<FileInfoDto?> GetFileInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        var __result = await GetFileInfoWithHttpInfoAsync(libraryId, libraryFilePath, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<FileInfoDto?>(__result, token);
    }

    /// <summary>
    /// Get file status
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetFileStatusWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(libraryId, "libraryId");
        __my_queryBuilder.AddParameter(libraryFilePath, "libraryFilePath");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/file/status{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get file status
    /// </summary>
    public async System.Threading.Tasks.Task<FileStatusDto?> GetFileStatusAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        var __result = await GetFileStatusWithHttpInfoAsync(libraryId, libraryFilePath, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<FileStatusDto?>(__result, token);
    }

    /// <summary>
    /// Get file block list
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetFileBlockListWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(libraryId, "libraryId");
        __my_queryBuilder.AddParameter(libraryFilePath, "libraryFilePath");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/file/blocks{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get file block list
    /// </summary>
    public async System.Threading.Tasks.Task<System.Collections.Generic.List<string>?> GetFileBlockListAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default)
    {
        var __result = await GetFileBlockListWithHttpInfoAsync(libraryId, libraryFilePath, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<System.Collections.Generic.List<string>?>(__result, token);
    }

    /// <summary>
    /// Pull a block
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PullBlockWithHttpInfoAsync(string? blockChecksum = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(blockChecksum, "blockChecksum");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/file/block{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Pull a block
    /// </summary>
    public async System.Threading.Tasks.Task<BlockDto?> PullBlockAsync(string? blockChecksum = default, System.Threading.CancellationToken token = default)
    {
        var __result = await PullBlockWithHttpInfoAsync(blockChecksum, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<BlockDto?>(__result, token);
    }

    /// <summary>
    /// Push a block
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PushBlockWithHttpInfoAsync(BlockDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"v1/file/block", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Push a block
    /// </summary>
    public async System.Threading.Tasks.Task<StatusDto?> PushBlockAsync(BlockDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await PushBlockWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<StatusDto?>(__result, token);
    }

    /// <summary>
    /// Create file transaction
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateFileTransactionWithHttpInfoAsync(FileTransactionCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"v1/file/transactions", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Create file transaction
    /// </summary>
    public async System.Threading.Tasks.Task<FileTransactionDto?> CreateFileTransactionAsync(FileTransactionCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await CreateFileTransactionWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<FileTransactionDto?>(__result, token);
    }

    /// <summary>
    /// Finish file transaction
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> FinishFileTransactionWithHttpInfoAsync(System.Guid? transactionId = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(transactionId, "transactionId");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"v1/file/transactions/finish{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Finish file transaction
    /// </summary>
    public async System.Threading.Tasks.Task<FileTransactionFinishDto?> FinishFileTransactionAsync(System.Guid? transactionId = default, System.Threading.CancellationToken token = default)
    {
        var __result = await FinishFileTransactionWithHttpInfoAsync(transactionId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<FileTransactionFinishDto?>(__result, token);
    }
}

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
public interface IFileClient
{
    /// <summary>
    /// Get file total checksum
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetTotalChecksumWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get file total checksum
    /// </summary>
    public System.Threading.Tasks.Task<FileChecksumDto?> GetTotalChecksumAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get file info
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetFileInfoWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get file info
    /// </summary>
    public System.Threading.Tasks.Task<FileInfoDto?> GetFileInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get file status
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetFileStatusWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get file status
    /// </summary>
    public System.Threading.Tasks.Task<FileStatusDto?> GetFileStatusAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get file block list
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetFileBlockListWithHttpInfoAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get file block list
    /// </summary>
    public System.Threading.Tasks.Task<System.Collections.Generic.List<string>?> GetFileBlockListAsync(System.Guid? libraryId = default, string? libraryFilePath = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Pull a block
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PullBlockWithHttpInfoAsync(string? blockChecksum = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Pull a block
    /// </summary>
    public System.Threading.Tasks.Task<BlockDto?> PullBlockAsync(string? blockChecksum = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Push a block
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PushBlockWithHttpInfoAsync(BlockDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Push a block
    /// </summary>
    public System.Threading.Tasks.Task<StatusDto?> PushBlockAsync(BlockDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create file transaction
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateFileTransactionWithHttpInfoAsync(FileTransactionCreateDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create file transaction
    /// </summary>
    public System.Threading.Tasks.Task<FileTransactionDto?> CreateFileTransactionAsync(FileTransactionCreateDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Finish file transaction
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> FinishFileTransactionWithHttpInfoAsync(System.Guid? transactionId = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Finish file transaction
    /// </summary>
    public System.Threading.Tasks.Task<FileTransactionFinishDto?> FinishFileTransactionAsync(System.Guid? transactionId = default, System.Threading.CancellationToken token = default);
}
