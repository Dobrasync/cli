/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Lamashare.CLI.ApiGen.Models;

namespace Lamashare.CLI.ApiGen.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class LibraryClient : ILibraryClient
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public LibraryClient(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// Create new library
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateLibraryWithHttpInfoAsync(LibraryCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"v1/library", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Create new library
    /// </summary>
    public async System.Threading.Tasks.Task<LibraryDto?> CreateLibraryAsync(LibraryCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await CreateLibraryWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<LibraryDto?>(__result, token);
    }

    /// <summary>
    /// Get a library with given id
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetLibraryByIdWithHttpInfoAsync(System.Guid libraryId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/library/{libraryId}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get a library with given id
    /// </summary>
    public async System.Threading.Tasks.Task<LibraryDto?> GetLibraryByIdAsync(System.Guid libraryId, System.Threading.CancellationToken token = default)
    {
        var __result = await GetLibraryByIdWithHttpInfoAsync(libraryId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<LibraryDto?>(__result, token);
    }

    /// <summary>
    /// Update a library of given id
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> UpdateLibraryByIdWithHttpInfoAsync(LibraryUpdateDto body, System.Guid libraryId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Put, $"v1/library/{libraryId}", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Update a library of given id
    /// </summary>
    public async System.Threading.Tasks.Task<LibraryDto?> UpdateLibraryByIdAsync(LibraryUpdateDto body, System.Guid libraryId, System.Threading.CancellationToken token = default)
    {
        var __result = await UpdateLibraryByIdWithHttpInfoAsync(body, libraryId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<LibraryDto?>(__result, token);
    }

    /// <summary>
    /// Delete a library of given id
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteLibraryByIdWithHttpInfoAsync(System.Guid libraryId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Delete, $"v1/library/{libraryId}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Delete a library of given id
    /// </summary>
    public async System.Threading.Tasks.Task<LibraryDto?> DeleteLibraryByIdAsync(System.Guid libraryId, System.Threading.CancellationToken token = default)
    {
        var __result = await DeleteLibraryByIdWithHttpInfoAsync(libraryId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<LibraryDto?>(__result, token);
    }
}

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
public interface ILibraryClient
{
    /// <summary>
    /// Create new library
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateLibraryWithHttpInfoAsync(LibraryCreateDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create new library
    /// </summary>
    public System.Threading.Tasks.Task<LibraryDto?> CreateLibraryAsync(LibraryCreateDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get a library with given id
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetLibraryByIdWithHttpInfoAsync(System.Guid libraryId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get a library with given id
    /// </summary>
    public System.Threading.Tasks.Task<LibraryDto?> GetLibraryByIdAsync(System.Guid libraryId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Update a library of given id
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> UpdateLibraryByIdWithHttpInfoAsync(LibraryUpdateDto body, System.Guid libraryId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Update a library of given id
    /// </summary>
    public System.Threading.Tasks.Task<LibraryDto?> UpdateLibraryByIdAsync(LibraryUpdateDto body, System.Guid libraryId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Delete a library of given id
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteLibraryByIdWithHttpInfoAsync(System.Guid libraryId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Delete a library of given id
    /// </summary>
    public System.Threading.Tasks.Task<LibraryDto?> DeleteLibraryByIdAsync(System.Guid libraryId, System.Threading.CancellationToken token = default);
}
