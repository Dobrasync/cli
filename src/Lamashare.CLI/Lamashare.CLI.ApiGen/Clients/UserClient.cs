/////////////////////////////////////////////////////////////////
//															   //
// This code is generated by a tool                            //
// https://github.com/StevenThuriot/dotnet-openapi-generator   //
//															   //
/////////////////////////////////////////////////////////////////

#nullable enable

#pragma warning disable CS8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.

using Lamashare.CLI.ApiGen.Models;

namespace Lamashare.CLI.ApiGen.Clients;

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
public sealed class UserClient : IUserClient
{
    private readonly System.Net.Http.HttpClient __my_http_client;
    private readonly ClientOptions __my_options;

    public UserClient(System.Net.Http.HttpClient client, ClientOptions options)
    {
        __my_http_client = client;
        __my_options = options;
    }

    /// <summary>
    /// Create a new user
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateUserWithHttpInfoAsync(UserCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"v1/user", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Create a new user
    /// </summary>
    public async System.Threading.Tasks.Task<UserDto?> CreateUserAsync(UserCreateDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await CreateUserWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserDto?>(__result, token);
    }

    /// <summary>
    /// Register as new user
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> RegisterUserWithHttpInfoAsync(RegisterUserDto body, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"v1/user/register", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Register as new user
    /// </summary>
    public async System.Threading.Tasks.Task<AuthDto?> RegisterUserAsync(RegisterUserDto body, System.Threading.CancellationToken token = default)
    {
        var __result = await RegisterUserWithHttpInfoAsync(body, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<AuthDto?>(__result, token);
    }

    /// <summary>
    /// Check username availability
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> IsUsernameAvailableWithHttpInfoAsync(string username, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/user/username-available/{username}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Check username availability
    /// </summary>
    public async System.Threading.Tasks.Task<bool?> IsUsernameAvailableAsync(string username, System.Threading.CancellationToken token = default)
    {
        var __result = await IsUsernameAvailableWithHttpInfoAsync(username, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<bool?>(__result, token);
    }

    /// <summary>
    /// Get a user with given id
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetUserByIdWithHttpInfoAsync(System.Guid userId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/user/{userId}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Get a user with given id
    /// </summary>
    public async System.Threading.Tasks.Task<UserDto?> GetUserByIdAsync(System.Guid userId, System.Threading.CancellationToken token = default)
    {
        var __result = await GetUserByIdWithHttpInfoAsync(userId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<UserDto?>(__result, token);
    }

    /// <summary>
    /// Gets all libraries of user
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAllLibrariesOfUserWithHttpInfoAsync(System.Guid userId, int? Page = default, int? PageSize = default, string? OrderBy = default, string? Filter = default, System.Threading.CancellationToken token = default)
    {
        __QueryBuilder __my_queryBuilder = new();
        __my_queryBuilder.AddParameter(Page, "Page");
        __my_queryBuilder.AddParameter(PageSize, "PageSize");
        __my_queryBuilder.AddParameter(OrderBy, "OrderBy");
        __my_queryBuilder.AddParameter(Filter, "Filter");

        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Get, $"v1/user/{userId}/libraries{__my_queryBuilder}", token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Gets all libraries of user
    /// </summary>
    public async System.Threading.Tasks.Task<LibraryDtoPaging?> GetAllLibrariesOfUserAsync(System.Guid userId, int? Page = default, int? PageSize = default, string? OrderBy = default, string? Filter = default, System.Threading.CancellationToken token = default)
    {
        var __result = await GetAllLibrariesOfUserWithHttpInfoAsync(userId, Page, PageSize, OrderBy, Filter, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<LibraryDtoPaging?>(__result, token);
    }

    /// <summary>
    /// Create new library for user
    /// </summary>
    public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateUserLibraryWithHttpInfoAsync(LibraryCreateDto body, System.Guid userId, System.Threading.CancellationToken token = default)
    {
        var __my_request = await __my_options.CreateRequest(System.Net.Http.HttpMethod.Post, $"v1/user/{userId}/library", body, token);
        return await __my_http_client.SendAsync(__my_request, token);
    }

    /// <summary>
    /// Create new library for user
    /// </summary>
    public async System.Threading.Tasks.Task<LibraryDto?> CreateUserLibraryAsync(LibraryCreateDto body, System.Guid userId, System.Threading.CancellationToken token = default)
    {
        var __result = await CreateUserLibraryWithHttpInfoAsync(body, userId, token);
        await __my_options.InterceptResponse(__result, token);
        return await __my_options.DeSerializeContent<LibraryDto?>(__result, token);
    }
}

[System.CodeDom.Compiler.GeneratedCode("dotnet-openapi-generator", "8.0.0-preview.15+2dc8cfca012adb9b7e1a243f167db99da7b5cfe4")]
public interface IUserClient
{
    /// <summary>
    /// Create a new user
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateUserWithHttpInfoAsync(UserCreateDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create a new user
    /// </summary>
    public System.Threading.Tasks.Task<UserDto?> CreateUserAsync(UserCreateDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Register as new user
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> RegisterUserWithHttpInfoAsync(RegisterUserDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Register as new user
    /// </summary>
    public System.Threading.Tasks.Task<AuthDto?> RegisterUserAsync(RegisterUserDto body, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Check username availability
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> IsUsernameAvailableWithHttpInfoAsync(string username, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Check username availability
    /// </summary>
    public System.Threading.Tasks.Task<bool?> IsUsernameAvailableAsync(string username, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get a user with given id
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetUserByIdWithHttpInfoAsync(System.Guid userId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Get a user with given id
    /// </summary>
    public System.Threading.Tasks.Task<UserDto?> GetUserByIdAsync(System.Guid userId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Gets all libraries of user
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAllLibrariesOfUserWithHttpInfoAsync(System.Guid userId, int? Page = default, int? PageSize = default, string? OrderBy = default, string? Filter = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Gets all libraries of user
    /// </summary>
    public System.Threading.Tasks.Task<LibraryDtoPaging?> GetAllLibrariesOfUserAsync(System.Guid userId, int? Page = default, int? PageSize = default, string? OrderBy = default, string? Filter = default, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create new library for user
    /// </summary>
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CreateUserLibraryWithHttpInfoAsync(LibraryCreateDto body, System.Guid userId, System.Threading.CancellationToken token = default);

    /// <summary>
    /// Create new library for user
    /// </summary>
    public System.Threading.Tasks.Task<LibraryDto?> CreateUserLibraryAsync(LibraryCreateDto body, System.Guid userId, System.Threading.CancellationToken token = default);
}
